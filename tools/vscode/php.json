{
	"Discord Command": {
		"prefix": "dcommand",
		"description": "create discord bot command class ",
		"body": [
			"return function (\\$client) {",
			"\treturn (new class(\\$client) extends \\CharlotteDunois\\Livia\\Commands\\Command",
    	"\t{",
      "\t\tfunction __construct(\\CharlotteDunois\\Livia\\LiviaClient \\$client)",
      "\t\t{",
      "\t\t\tparent::__construct(\\$client, array(",
      "\t\t\t\t'name' => '$1', // Give command name", 
      "\t\t\t\t'aliases' => array(),",
      "\t\t\t\t'group' => '$2', // Group in ['command', 'util']", 
      "\t\t\t\t'description' => '$3', // Fill the description", 
      "\t\t\t\t'guildOnly' => false,",
      "\t\t\t\t'throttling' => array(",
      "\t\t\t\t\t'usages' => 5,",
      "\t\t\t\t\t'duration' => 10",
      "\t\t\t\t),",
      "\t\t\t\t'guarded' => true,",
      "\t\t\t\t'args' => array( // If you need some variables you should either fill this section or remove it", 
      "\t\t\t\t\tarray(",
      "\t\t\t\t\t\t'key' => 'replaceme',",
      "\t\t\t\t\t\t'label' => 'replaceme',",
      "\t\t\t\t\t\t'prompt' => 'replaceme',",
      "\t\t\t\t\t\t'type' => 'replaceme'",
      "\t\t\t\t\t)",
      "\t\t\t\t)",
      "\t\t\t));",
      "\t\t}",	
			"",
      "\t\tfunction run(\\CharlotteDunois\\Livia\\CommandMessage \\$message, \\ArrayObject \\$args, bool \\$fromPattern)",
      "\t\t{",
      "\t\t\treturn  \\$message->say('...');",
      "\t\t}",
    	"\t});",
			"};"	
			]
	},
	"Discord command test": {
		"prefix": "dtest",
		"description": "Create test for discord bot command",
		"body": [
			"namespace Tests\\Commands;",
			"",
			"use Tests\\TestCase;",
			"use React\\Promise\\Promise;",
			"use ArrayObject;",
			"",
			"class $1CommandTest extends TestCase",
			"{",
			"",
			"    private \\$command;",
			"",
			"    protected function setUp()",
			"    {",
			"        \\$commandCreate = require __DIR__ . '/../../commands/$1/$1.command.php';",
			"",
			"        \\$this->client = \\$this->createMock('\\CharlotteDunois\\Livia\\LiviaClient');",
			"        \\$registry = \\$this->createMock('\\CharlotteDunois\\Livia\\CommandRegistry');",
			"        \\$types = \\$this->createMock('\\CharlotteDunois\\Yasmin\\Utils\\Collection');",
			"",
			"        \\$types->expects(\\$this->exactly(1))->method('has')->willReturn(true);",
			"        \\$registry->expects(\\$this->exactly(2))->method('__get')->with('types')->willReturn(\\$types);",
			"        \\$this->client->expects(\\$this->exactly(2))->method('__get')->with('registry')->willReturn(\\$registry);",
			"",
			"        \\$this->command = \\$commandCreate(\\$this->client);",
			"",
			"        parent::setUp();",
			"    }",
			"",
			"    public function test$1Basics()",
			"    {",
			"       \\$this->assertEquals(\\$this->command->name, '$1');",
			"       \\$this->assertEquals(\\$this->command->description, '$2');",
			"       \\$this->assertEquals(\\$this->command->groupID, '$3');",
			"    }",
			"",
			"    public function test$1Arguments()",
			"    {",
			"       \\$this->assertEquals(sizeof(\\$this->command->args), 1);",
			"       \\$this->assertArrayHasKey('key', \\$this->command->args[0]);",
			"       \\$this->assertArrayHasKey('label', \\$this->command->args[0]);",
			"       \\$this->assertArrayHasKey('prompt', \\$this->command->args[0]);",
			"       \\$this->assertArrayHasKey('type', \\$this->command->args[0]);",
			"    }",
			"",
			"    public function testSimpleResponseToTheDiscord(): void",
			"    {",
			"",
			"        \\$commandMessage = \\$this->createMock('CharlotteDunois\\Livia\\CommandMessage');",
			"        \\$promise = new Promise(function () { });",
			"",
			"        \\$commandMessage->expects(\\$this->once())->method('say')->with('...')->willReturn(\\$promise);",
			" ",
			"        \\$this->command->run(\\$commandMessage, new ArrayObject(), false);",
			"    }",
			"",
			"    public function __sleep()",
			"    {",
			"        \\$this->command = null;",
			"    }",
			"}"			
		]
	},
	"TestLiviaCommandMessage": {
		"prefix": "LiviaCommandTest",
		"description": "Create command test function",
		"body": [
			"public function test$1(): void",
			"{",
			" \\$commandMessage = \\$this->createMock('CharlotteDunois\\Livia\\CommandMessage');",
			" \\$promise = new Promise(function () { });",
			"",
			" \\$commandMessage->expects(\\$this->once())->method('say')->with('$2')->willReturn(\\$promise);",
			"",
			" \\$this->command->run(\\$commandMessage, new ArrayObject(), false);",
			"}"
		]
	}
}

